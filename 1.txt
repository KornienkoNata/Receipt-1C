Функция СведенияОВнешнейОбработке() Экспорт
 // Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные	
  ПараметрыРегистрации = Новый Структура; 
  
  // Объявим еще одну переменную, которая нам потребуется ниже
  МассивНазначений = Новый Массив;
  
  // Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
  // Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
  ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
  
  // Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
  // Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
  // которые поддерживают механизм ВПФ
  МассивНазначений.Добавить("Документ.РеализацияТоваровУслуг");  //Укажите документ   !!!!!!!!!!!!
  
  
  ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
  
  
  // Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
  
  ПараметрыРегистрации.Вставить("Наименование", "ТоварыйЧек");   //Укажите наименование !!!!!!!!!

  
  // Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
  ПараметрыРегистрации.Вставить("Версия", "1.0");
  ПараметрыРегистрации.Вставить("Информация", "");
  
  // Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
  
  // Создадим таблицу команд (подробнее смотрим ниже)
  ТаблицаКоманд = ПолучитьТаблицуКоманд();
  
  // Добавим команду в таблицу
  ДобавитьКоманду(ТаблицаКоманд, "ТоварыйЧек", "ИмяПечатнойФормы", "ВызовСерверногоМетода", Истина, "ПечатьMXL");   //Укажите наименование !!!!!!!!!
  
  // Сохраним таблицу команд в параметры регистрации обработки
  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
  
  // Теперь вернем системе наши параметры
  Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
  // Создадим пустую таблицу команд и колонки в ней
  Команды = Новый ТаблицаЗначений;
  
  // Как будет выглядеть описание печатной формы для пользователя
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  
  // Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  
  //Тут задается, как должна вызваться команда обработки
   // Возможные варианты:
   // - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
   // - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
   // - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  
  // Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  
  // Для печатной формы должен содержать строку ПечатьMXL 
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  
  Возврат Команды;
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  // Добавляем команду в таблицу команд по переданному описанию.
  // Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд	
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры


// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
// ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
// МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
// ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
// КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
// ПараметрыВывода       - Структура        - Параметры сформированных табличных документов           
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыПечати = Неопределено;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ИмяПечатнойФормы") Тогда        //Укажите наименование !!!!!!!!!
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ИмяПечатнойФормы", "ТоварыйЧек", СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;

КонецПроцедуры // Печать()


Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	//Здесь вы определяете алгоритм для печатной формы
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Контрагент КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация.Префикс КАК Префикс,
	|	РеализацияТоваровУслуг.Склад,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Менеджер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Наименование КАК ЕдиницаЦены,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ПроцентАвтоматическойСкидки КАК Скидка,
	|	ВложенныйЗапрос.СуммаБезСкидки КАК СуммаБезСкидки
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ РеализацияТоваровУслуг.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА РеализацияТоваровУслуг.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ РеализацияТоваровУслуг.Упаковка.ЕдиницаИзмерения
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ПроцентРучнойСкидки КАК Скидка,
	|		РеализацияТоваровУслуг.Упаковка КАК Упаковка,
	|		РеализацияТоваровУслуг.Цена КАК Цена,
	|		РеализацияТоваровУслуг.КоличествоУпаковок КАК Количество,
	|		РеализацияТоваровУслуг.Сумма КАК Сумма,
	|		РеализацияТоваровУслуг.СуммаРучнойСкидки КАК СуммаСкидки,
	|		РеализацияТоваровУслуг.Сумма + РеализацияТоваровУслуг.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|		РеализацияТоваровУслуг.НомерСтроки КАК НомерСтроки,
	|		РеализацияТоваровУслуг.Ссылка.Контрагент КАК Контрагент,
	|		РеализацияТоваровУслуг.Ссылка.Организация КАК Организация,
	|		РеализацияТоваровУслуг.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|		РеализацияТоваровУслуг.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&МассивДокументов)
	|		И РеализацияТоваровУслуг.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	КОЛИЧЕСТВО(Скидка),
	|	СУММА(СуммаБезСкидки)
	|ПО
	|	Ссылка");

	Запрос.УстановитьПараметр("МассивДокументов", 				МассивОбъектов);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МХ1";           
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Макет = ПолучитьМакет("Макет");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в накладной только услуги - перейдем к следующему документу
		
		Если НайденСледующий Тогда
			ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
			ВыборкаПоТоварам.Сбросить();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим заголовок
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Товарный чек'"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//Выводит поставщика
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.Дата), "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		//Выводим магазин
		ОбластьМакета = Макет.ПолучитьОбласть("Магазин");
		Магазин = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		ОбластьМакета.Параметры.Магазин = Магазин;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		//Выводим покупателя
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование, ЮридическийАдрес, Телефоны");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//Выводим 
		
		//ОбластьМакета.Параметры.Заполнить(ДанныеПечати);		
		//НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.Номер);
		//ОбластьМакета.Параметры.НомерДок = НомерНаПечать;
		//ОбластьМакета.Параметры.ДатаДок = Формат(ДанныеПечати.Дата, "ДФ=dd.MM.yyyy");
		
					
		// Выводим заголовок таблицы Товары
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы Товары			
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		НомерСтроки = 0;
		ВсегоБезСкидок=0;
		ВсегоСкидок =0;
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоТоварам);
			ТабличныйДокумент.Вывести(ОбластьМакета);				
			ВсегоБезСкидок = ВсегоБезСкидок + ВыборкаПоТоварам.СуммаБезСкидки;
			ВсегоСкидок = ВсегоСкидок +1;
		КонецЦикла;
		
		//Выводим ИТОГО
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		СуммаДокумента =ДанныеПечати.СуммаДокумента;						
		ОбластьМакета.Параметры.Сумма = СуммаДокумента;
		ОбластьМакета.Параметры.ВсегоБезСкидок= ВсегоБезСкидок;	
		ОбластьМакета.Параметры.ВсегоСкидок= ВсегоСкидок;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//Выводим сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");		
		СуммаПрописью=ЧислоПрописью(СуммаДокумента, "Л=ru_RU;ДП=Истина", "рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2");				
		ОбластьМакета.Параметры.СуммаПрописью= СуммаПрописью;
		//ОбластьМакета.Параметры.ИтоговаяСтрока=СуммаДокумента;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОтветственныйПредставление = ДанныеПечати.Менеджер;
		ОбластьМакета.Параметры.ОтветственныйПредставление = ОтветственныйПредставление;				
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		//ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(10);	
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	

КонецФункции // СформироватьПечатнуюФормуНакладная()



